utils:::menuInstallPkgs()
q()
install.packages(aTSA)
install.packages(atsa)
install.packages(zoo)
install.packages(aTSA)
### Artigo IPCA
install.packages("fracdiff")
install.packages("forecast")
install.packages("readxl")
install.packages("ggplot2")
install.packages("urca")
install.packages("fGarch")
install.packages("rugarch")
install.packages("seasonal")
library(fracdiff)
library(forecast)
library(readxl)
library(ggplot2)
library(urca)
library(fGarch)
library(rugarch)
library(seasonal)
install.packages("aTSA")
library(aTSA)
install.packages("zoo")
install.packages("zoo")
library(zoo)
install.packages("zoo")
install.packages("zoo")
library(zoo)
5+5
a <- 10
a
a <- 10
a
install.packages("stringr")
library(stringr)
Nome <- Ágatha
Nome <- "Ágatha"
Sobrenome <- "Lechner da Silva"
NomeCompleto <- str_c(Nome, " ", Sobrenome)
NomeCompleto
Salario < - 2000
Salario <- 2000
horas <- 2
SH <- salario/horas
SH <- Salario/horas
shi <- as.integer(SH)
shi
shishr <-roud(sh)
shishr <-round(sh)
shishr <-round(SH)
shr <-round(SH)
shr
Salario <- 2450
SH <- Salario/horas
shi <- as.integer(SH)
shr <-round(SH)
shr
CargaHoraria < - c(220, 220, 150, 100, 100)
CargaHoraria <- c(220, 220, 150, 100, 100)
summary(CargaHoraria)
CargaHoraria <- as.factor(c)
CargaHoraria <- as.factor(c(220, 220, 150, 100, 100))
summary(CargaHoraria)
mode(CargaHoraria)
class(CargaHoraria)
L1 <- Salario > horas
is.vector(Nomes)
a <- c(1,2,3,4,5)
b <- c(1,"2",3,4,5)
a
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- lis(10,"2",8)
b <- list(10,"2",8)
is.list(b)
mode(b)
str(b)
e <-list(c(10,3,51,5), "2",8)
str(e)
m <- matrix(1:9, nrow = 3)
View(m)
View(m)
View(m)
m
mode(m)
class(m)
m(1,3)
m[1,3]
m[1,3] <- "a"
mode(m)
class(m)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("readxl")
install.packages("scales")
install.packages("extrafont")
install.packages("gganimate")
install.packages("ggbeeswarm")
install.packages("plotly")
install.packages("colorspace")
install.packages("RColorBrewer")
install.packages("viridis")
install.packages("geobr")
install.packages("cartogram")
install.packages("sf")
install.packages("geojsonsf")
library(tidyverse)
library(readxl)
library(scales)
library(extrafont)
library(gganimate)
library(ggbeeswarm)
library(plotly)
library(colorspace)
library(RColorBrewer)
library(viridis)
library(geobr)
library(cartogram)
library(sf)
library(geojsonsf)
library(tidyverse)
library(readxl)
library(scales)
library(extrafont)
library(gganimate)
library(ggbeeswarm)
library(plotly)
library(colorspace)
library(RColorBrewer)
library(viridis)
library(geobr)
library(cartogram)
library(sf)
library(geojsonsf)
library(tidyverse)
library(readxl)
library(scales)
library(extrafont)
library(gganimate)
library(ggbeeswarm)
library(plotly)
library(colorspace)
library(RColorBrewer)
library(viridis)
library(geobr)
library(cartogram)
library(sf)
library(geojsonsf)
loadfonts()
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Lora", colour = "grey20"),
title = element_text(size = 10, color = "dimgrey", face = "plain"),
plot.subtitle = element_text(color = "grey20", face = "plain", size = 10),
axis.text = element_text(colour = "grey20", size = 8, family = "Source Sans Pro"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_line(size = 0.4),
axis.ticks.length = unit(.2, "cm"),
axis.title = element_text(size = 8, colour = "grey20"),
legend.position = 'none',
legend.text = element_text(size = 8, family = "Source Sans Pro"),
legend.title = element_text(size = 9, family = "Source Sans Pro")
)
}
tema_barra <- function(){
tema() +
theme(
axis.ticks.y = element_blank()
)
}
tema_mapa <- function() {
tema() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "none",
legend.text = element_text(size = 10),
plot.background = element_blank(),
panel.background = element_blank())
}
setwd("~/Github/estatais-estados-master/estatais-estados-master/v2023")
setwd("~/Github/empresas-estados/empresas-estados/v2023")
setwd("~/Github/empresas-estados/v2023")
tab_uf <- read_excel("./dados/dados-originais/tab_ufs.xlsx") %>%
select(Estado, Nome_estado, REGIAO)
View(tab_uf)
tab_uf
dados_raw <- read_excel("./dados/dados-originais/quadro_estatais.xlsx", sheet = "Todos")
#tab_setores <- read_excel("./dados/dados-originais/tab_setores.xlsx", sheet = "tab")
tab_definicoes_setores <- read_excel("./dados/dados-originais/tab_setores.xlsx", sheet = "def")
tab_definicoes_setores
View(tab_definicoes_setores)
View(tab_definicoes_setores)
View(tab_uf)
dados_selecionados_raw <- dados_raw %>%
select(
Estado    = UF,
emp       = `Estatal`,
sit       = `Situação`,
setor      = `Setor`,
esp       = `Espécie`,
dep       = `Dependência`,
PL        = `Patrimônio Líquido`,
lucros    = `Lucro / Prejuízo Líquido do Exercício`,
gov_ca    = `Possui Conselho de Administração`,
gov_cf    = `Possui Conselho Fiscal`,
gov_aud   = `Possui Comitê de Auditoria`, #(sic)
maior_rem = `Remuneração bruta total paga no ano (empregado que recebeu a maior remuneração)`,
plr_rva   = `Foi Distribuído PLR ou RVA no exercício`,
qde_empregados = `Número de Empregados (incluindo temporários e terceirizados)`,
desp_investimento = `Investimento (por competência)`,
desp_pessoal = `Despesa com Pessoal, incluindo temporários e terceirizados (por competência)`,
Dividendos = `Dividendos e Juros sobre Capital Próprio pagos ao Tesouro Estadual / Municipal (pago)`,
`Subvenção` = `Subvenções - Exercício`,
`Subvenção (anterior)` = `Subvenções  - Exercício anterior`,
`Reforço de Capital` = `Reforço de Capital - Exercício`,
`Reforço de Capital (anterior)` = `Reforço de Capital - Exercício anterior`,
#result = `Resultado para o Estado Acionista`,
capital = `Capital Social Integralizado - Exercício`,
#var_capital = `Variação Capital Social Integralizado`,
#var_acoes = `Crescimento ações`,
link      = `Link Carta Anual`,
indicio_dependencia = `Indícios de Dependência`
)
# Remove all special characters from the 'Name' column
dados_selecionados_raw$emp <- str_replace_all(dados_selecionados_raw$emp, "[^[:alnum:] ]", "")
sim <- c("SIM", "Sim", "CONTROLE INTERNO", "Possui")
nao <- c("NÃO", "Não", "Não Possui", "Não possui", "NAO", "NÂO")
dados_selecionados <- dados_selecionados_raw %>%
#left_join(limpa_setor) %>%
#left_join(tab_setores) %>%
left_join(tab_uf) %>%
#left_join(limpa_dep) %>%
mutate(
dep     = str_to_title(dep),
dep     = ifelse(is.na(dep), "Não Informado", dep),
gov     = gov_ca %in% sim & gov_cf %in% sim & gov_aud %in% sim,
plr_rva = ifelse(plr_rva %in% sim, "Sim",
ifelse(plr_rva %in% nao, "Não", plr_rva))) %>%
mutate_at(
.vars = c("PL", "lucros", "desp_investimento", "desp_pessoal", "qde_empregados"),
.funs = as.numeric) %>%
mutate(result_NA = is.na(Dividendos) & is.na(`Subvenção`) & is.na(`Reforço de Capital`)) %>%
mutate_at(.vars = vars("Dividendos", `Subvenção`, `Reforço de Capital`),
.funs = ~ifelse(is.na(.), 0, .)) %>%
mutate(`Resultado para o Estado Acionista` = ifelse(result_NA, NA, Dividendos - `Subvenção` - `Reforço de Capital`))
View(dados_selecionados_raw)
View(dados_selecionados)
View(dados_raw)
dados_selecionados <- dados_selecionados_raw %>%
#left_join(limpa_setor) %>%
#left_join(tab_setores) %>%
left_join(tab_uf) %>%
#left_join(limpa_dep) %>%
mutate(
dep     = str_to_title(dep),
dep     = ifelse(is.na(dep), "Não Informado", dep),
gov     = gov_ca %in% sim & gov_cf %in% sim & gov_aud %in% sim,
plr_rva = ifelse(plr_rva %in% sim, "Sim",
ifelse(plr_rva %in% nao, "Não", plr_rva))) %>%
mutate_at(
.vars = c("PL", "lucros", "desp_investimento", "desp_pessoal", "qde_empregados"),
.funs = as.numeric) %>%
mutate(result_NA = is.na(Dividendos) & is.na(`Subvenção`) & is.na(`Reforço de Capital`)) %>%
mutate_at(.vars = vars("Dividendos", `Subvenção`, `Reforço de Capital`),
.funs = ~ifelse(is.na(.), 0, .)) %>%
mutate(`Resultado para o Estado Acionista` = ifelse(result_NA, NA, Dividendos - `Subvenção` - `Reforço de Capital`))
#mapa <- geobr::read_state()
#saveRDS(mapa, "./dados/dados-intermediarios/mapa.rds")
mapa <- readRDS("./dados/dados-intermediarios/mapa.rds")
mapa <- st_simplify(mapa, dTolerance = .0001)
View(mapa)
View(mapa[[6]][[10]])
tab_definicoes_setores$cores <- viridis::plasma(
nrow(tab_definicoes_setores),
direction = 1)
write.csv(tab_definicoes_setores,
file = "./dados/lista-setores.csv",
fileEncoding = "UTF-8")
dados_qde_setor_estado <- dados_selecionados %>%
count(setor, Estado)
primeiro_termo_setor <- str_split(
unique(dados_selecionados$setor),
pattern = " ",
simplify = TRUE)[,1] %>%
str_replace_all(pattern = "[^a-zA-Z ]", replacement = "") # para ficar igual ao JS
todos_setores_estados <-
full_join(
data.frame(setor = unique(dados_selecionados$setor),
cod_setor = primeiro_termo_setor),
data.frame(Estado = unique(tab_uf$Estado)),
by = character()
)
dados_setor_estados_mapa <- todos_setores_estados %>%
left_join(dados_qde_setor_estado) %>%
mutate(tem_empresa = ifelse(is.na(n), 0,
ifelse(n > 0, 1, 0)),
) %>%
select(-n, -setor) %>%
spread(cod_setor, tem_empresa)
mapa_qde_export <- mapa %>%
rename(Estado = abbrev_state) %>%
left_join(dados_setor_estados_mapa)
write_file(
geojsonsf::sf_geojson(mapa_qde_export), #, digits = 5),
"./dados/mapa-setores.geojson")
setores <- data.frame(
setor = unique(dados_selecionados$setor)
)
mapa_qde_export <- mapa %>%
rename(Estado = abbrev_state) %>%
left_join(dados_setor_estados_mapa)
write_file(
geojsonsf::sf_geojson(mapa_qde_export), #, digits = 5),
"./dados/mapa-setores.geojson")
setores <- data.frame(
setor = unique(dados_selecionados$setor)
)
mapa_qde <- mapa %>%
rename(Estado = "abbrev_state") %>%
inner_join(dados_qde_setor_estado) %>%
rename(qde = "n") %>%
arrange(setor) %>%
mutate(setor = str_wrap(setor, width = 20))
graf_mapa_comp <- ggplot(mapa_qde)+# %>% filter(seg == "OUTRO")) +
geom_sf(data = mapa, fill = "#EFEFEF", color = "ghostwhite") +
geom_sf(aes(group = Estado, fill = ifelse(qde > 0, setor, NA)), color = "ghostwhite") +
# scale_fill_manual(values = c("TRUE" = "steelblue", "FALSE" = NA)) +
scale_fill_viridis_d(direction = 1,
option = "plasma", na.value = "#EFEFEF")+#,
#breaks = c(1e3, 100e3, 10000e3),
#trans = "log", #para usar uma escala de log
#labels = function(x){format(x/1e6, decimal.mark = ",", big.mark = ".")}) +
#labs(fill = "População \n(milhões)") +
tema() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
text = element_text(family = "Source Sans Pro"),
legend.position = "none",
legend.text = element_text(size = 10),
plot.background = element_blank(),
panel.background = element_blank())
graf_mapa_facet <- graf_mapa_comp + facet_wrap(~setor)#, labeller = setor_labeller)
ggsave(plot = graf_mapa_facet, "./plots/segmentos_facet2.png", width = 9, height = 8, dpi = 300) # windows: acrescentar: , type = "cairo-png"
qde_empresas_seg <- dados_selecionados %>%
group_by(setor, dep) %>%
summarise(qde = n()) %>%
ungroup() %>%
group_by(setor) %>%
mutate(qde_tot = sum(qde),
dep = factor(dep, levels = c("Dependente", "Não Dependente", "Não Informado"))) %>%
filter(!is.na(setor))
